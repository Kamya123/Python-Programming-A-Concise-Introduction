Now, let's look at a design pattern for loops. Here's a function add up. Three, five, seven, and to end, it says, type zero. What that did was, it added up the number three and five and seven and got 15. This is not sophisticated program, it just look at loops and how they're designed. Okay. We started out by setting sum equals zero. Then we went through the loop. In this case, we went through the loop while true is true and it's always true so we just go forever. And then, we input a number. Add zero to quit. Okay. That number got converted when it got input to an integer. This converts that string to an integer. Now, you test that number. If it's equal to zero, we use a double equal to make comparison. We'll break. That means we'll break out of the loop. If we don't break out of the loop, then we add number to sum and replace sum of that value. When we get through with the loop, we just print sum. So, the three parts where we initialized this variable, we updated this variable and then we made use this variable. In this case, we started with zero. Now, let's take a look at the similar thing for lists. Here is a list called baseball. Now, what I've done here is, I started out with an empty list, then I appended ball to it, then I appended bat to it, then I appended mitt to it, then I appended baseball. You see ball, bat and mitt are all appended. This is the list equivalent of adding numbers to a song. Now, let's write a program to build a list of numbers. We'll call this store_up. Well, and remember three, five, seven, we'll enter zero quit. So, now we've added three to the list and five to the list and seven to the list. We appended them. Now, let's compare these two. Whereas we have sum equals zero up here, we've got num_list as empty list down here. While true, we're going to loop forever. Okay. We're going to input a number, and this is exactly the same. If this next number is zero, we're going to break. That's exactly what we did before. Before we added the number to the sum, now, we're going to append the number to the list. And then when we get out of the list, we're going to print the number list. So that we have an initialization as before, we loop through the loop, we do something with the initial last list, and then, that will change it. And then we will make use of it when we get out of the loop. Now, I want you to write a function that will build the list. Here's the problem. You want to pretend that you're a waitress at a diner. That's what the function is going to be. You're going to be a waitress in a diner taking an order. So you'll come up to the table and say, "Hello, I'll be your waitress. What will you have?" Then as a customer, you'll say something like eggs, and she'll put that into the list. Bacon, she'll write that on her list. Toast, she'll write that on her list. And jelly, she'll write that on her list. You can order anything you want to she would just put it on the list. Then when you say, "that's all", she'll stop taking the order and print out the list of items that you ordered. That's the function that I want you to write and it involves creating a list, looping through and adding things to the list that will be numbered this time it will be foods. And then, indicating when you want the loop to end by entering that's all, and then printing out the list. Here's my run on that program just so you can see how it works. Diner waitress. That's what will happen when you run the program. Hello, I'll be your waitress. What will you have? It'll ask that question. Then it will loop through an answer menu item and you'll type in eggs, then it'll loop through, ask for another menu item, and you say bacon. Then it'll ask for another menu item and you give another one. And then it'll ask for another one and then you give them another one. And then, if you ever enter, that's all, that particular string, then it will quit taking the order and print out the list of things that you've ordered. Now, you try to write this function, write diner waitress, and when you get done, press continue and I'll show you my solution. Here's my solution. Let me run it once for you. I'll show you how it does work. Okay, I'll type bacon, eggs, toast, that's all. And it'll print out what I ordered. Here's the code definition, diner waitress, parenthesis colon. Print. Hello, I'll be your waitress. What will you have? Now, we'll start off a list with an empty list that'll be our order. We'll loop through forever, while true is true, we'll loop through. Here is the details of the loop. When we get through the loop, we'll print the phrase, you've ordered, and then we'll print order. An order of course is this list that started out as an empty list, but which we've been adding to. Let's see what we do every time through the loop. First of all, we'll issue an input statement, which will ask for a menu item. Over here, menu item. We'll store that in food. Now, I'm going to convert food to lowercase, so I can compare it to that's all, so that I can type it upper or lower case or however I feel like. It'll always be converted to lower case and I can compare to this. Notice that, we used a method of strings called lower. We convert it to lowercase. We use the double equals for comparison and we have the phrase that's all. If those are equal then we'll break out of the loop, and they will go print you've ordered and print your order. If the food ordered is not, the phrase, "that's all", then, we'll go to the else and we'll append, use the append method of list to append the food onto that list. Now, I want to point out that I knew the lower case existed. In your case, you wouldn't know that and so you probably would just say food, if food is equal to that's all. That mean you would have to type in that's all in lower case always. This is a little bit more flexible. I just thought I'd throw that in, so that you'd be aware of.