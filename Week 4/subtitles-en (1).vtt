WEBVTT

1
00:00:11.377 --> 00:00:14.890
Now we're going to do a little
descriptive statistics.

2
00:00:16.380 --> 00:00:19.430
First, let's look at Python
documentation for a moment.

3
00:00:20.470 --> 00:00:21.815
I'm going to go to this website.

4
00:00:28.740 --> 00:00:30.840
Notice that it brought up 3.5.1.

5
00:00:30.840 --> 00:00:35.140
When you do this,
it might bring up a different version

6
00:00:35.140 --> 00:00:38.430
because it's going to bring
up the latest version.

7
00:00:40.170 --> 00:00:46.139
Now, I'm using 3.4 and its table saying,
I'm going to click on that.

8
00:00:48.380 --> 00:00:50.648
That 3.5 is in development.

9
00:00:52.274 --> 00:00:53.184
At this point and time.

10
00:01:00.049 --> 00:01:07.790
Now look up statistics and that search
produced a whole batch of things.

11
00:01:07.790 --> 00:01:10.620
Statistics as a library
module is right here.

12
00:01:14.352 --> 00:01:16.720
And it's in Lib/statistics.py.

13
00:01:16.720 --> 00:01:19.750
And we're going to look
at several functions.

14
00:01:21.910 --> 00:01:27.650
Mean, median, mode,
standard deviation, and variance.

15
00:01:27.650 --> 00:01:31.690
Let me click through on one of those.

16
00:01:31.690 --> 00:01:34.900
So here's the mean, you can give it a list
and it'll compute the mean of the list.

17
00:01:34.900 --> 00:01:38.314
You can give it a list of reals and
it'll compute the mean of that.

18
00:01:42.538 --> 00:01:47.445
You go back to Spider you
can get to the same place I

19
00:01:47.445 --> 00:01:52.356
type in Python documentation,
click on index,

20
00:01:52.356 --> 00:01:57.080
statistics, and you see the same page.

21
00:01:57.080 --> 00:02:01.968
Mean, median, mode,
standard deviation, and variance.

22
00:02:11.402 --> 00:02:18.150
So let's define some lists so
that we can do the statistics on them.

23
00:02:19.370 --> 00:02:23.360
I'm also going to import the statistics
library so that we can use it.

24
00:02:25.850 --> 00:02:29.437
Now I'm going to compute
the mean of this N list.

25
00:02:31.796 --> 00:02:33.690
There it is.

26
00:02:33.690 --> 00:02:36.640
That's adding up the values in N list and

27
00:02:36.640 --> 00:02:39.110
dividing it by the number
values which is seven.

28
00:02:39.110 --> 00:02:43.180
We can do the same thing for
the real list.

29
00:02:44.540 --> 00:02:49.260
We're going to add up all these numbers
and divide by seven to get that.

30
00:02:51.640 --> 00:02:57.760
Now lets look at This in list again.

31
00:02:57.760 --> 00:03:00.439
And I'm going to print out
a sorted version of it.

32
00:03:03.810 --> 00:03:06.990
Now the median,
is supposed to be the middle value.

33
00:03:08.220 --> 00:03:13.530
From the sorted version,
we can find the middle value is five.

34
00:03:13.530 --> 00:03:14.610
Smaller three larger.

35
00:03:18.852 --> 00:03:21.960
Now I have another list, endless even.

36
00:03:23.300 --> 00:03:27.150
This has an odd number, so
there is a middle value.

37
00:03:27.150 --> 00:03:29.920
nlist even has a little bit
more complication than that.

38
00:03:32.994 --> 00:03:37.380
There are two middle values,
three smaller, three larger than the two.

39
00:03:41.491 --> 00:03:46.359
What the median function does
is it averages those two

40
00:03:46.359 --> 00:03:50.590
middle values and
we terms that as the median.

41
00:03:53.010 --> 00:03:58.040
With our list we have the same
kind of situation there

42
00:03:58.040 --> 00:04:01.070
have 3.14 as three 3 larger and 3 smaller.

43
00:04:02.300 --> 00:04:03.410
So, that's the median.

44
00:04:07.740 --> 00:04:09.550
And that's what Python finds.

45
00:04:11.720 --> 00:04:17.810
Now I have another r list and
it has two values in the middle,

46
00:04:17.810 --> 00:04:24.080
three smaller, three larger and
what does Python do with that?

47
00:04:24.080 --> 00:04:27.400
It takes the average of
those two in the middle and

48
00:04:27.400 --> 00:04:30.160
returns that as the median, same way.

49
00:04:32.930 --> 00:04:34.510
Now let's define another list,

50
00:04:34.510 --> 00:04:39.090
mlist, now I want to print mlist and
a sorted version of it.

51
00:04:43.170 --> 00:04:47.580
If you'll notice three occurs
more times than any other.

52
00:04:47.580 --> 00:04:50.011
And that makes it the mode.

53
00:04:54.431 --> 00:04:57.802
The mode is the value
that occurs most often.

54
00:05:01.542 --> 00:05:03.860
Now we have standard deviation.

55
00:05:05.880 --> 00:05:06.867
Then we have variance.

56
00:05:09.200 --> 00:05:12.250
You can look those up in the statistics
book if you're not familiar with it.

57
00:05:13.440 --> 00:05:17.522
The standard deviation is
a square root of the variance and

58
00:05:17.522 --> 00:05:22.280
they're both measures of how spread
out the data is about the mean.

59
00:05:25.336 --> 00:05:27.170
Now, here are three more functions.

60
00:05:27.170 --> 00:05:28.850
Maximum, minimum, and sum.

61
00:05:28.850 --> 00:05:35.830
Defining another in-list here,
the maximum of this is 106.

62
00:05:35.830 --> 00:05:39.977
Found that using max.

63
00:05:39.977 --> 00:05:44.900
Then, we'll find the minimum of this list,
which is minus 4.

64
00:05:44.900 --> 00:05:51.070
And the sum of the list is sum of n list.

65
00:05:51.070 --> 00:05:51.742
There it is.

66
00:05:57.136 --> 00:06:03.585
Now, let's write some functions that make
use of these descriptive statistics.

67
00:06:03.585 --> 00:06:08.337
First of all,
I'm going to generate a list, stat_list.

68
00:06:08.337 --> 00:06:13.165
Stat_list has 100 random
reals between 5000 and 6000.

69
00:06:13.165 --> 00:06:15.185
How do we get that?

70
00:06:15.185 --> 00:06:19.065
Well, random.random produces a random
number between zero and one.

71
00:06:20.580 --> 00:06:26.810
And we have to manage to convert that to
random numbers from five to six thousand.

72
00:06:26.810 --> 00:06:30.704
One of the things that we can
do is multiply it by thousand,

73
00:06:30.704 --> 00:06:33.645
then we have a random
number between zero and

74
00:06:33.645 --> 00:06:39.167
a thousand Clinical add 5000 to that,

75
00:06:39.167 --> 00:06:42.970
we have a random number between five and
six thousand.

76
00:06:42.970 --> 00:06:46.420
So this is how we wide up with
a number between five and

77
00:06:46.420 --> 00:06:49.500
six thousand that's pseudo random.

78
00:06:49.500 --> 00:06:52.540
And we going to append
that to the start list.

79
00:06:52.540 --> 00:06:54.030
We are going to that 100 times.

80
00:06:57.360 --> 00:07:06.010
So if I type stat list,
see there are a lot of numbers.

81
00:07:07.110 --> 00:07:13.450
That list is a list that I'm just
defining, this small list of integers.

82
00:07:15.550 --> 00:07:20.396
Now, I can compute the stats
on these using my stats.

83
00:07:23.173 --> 00:07:28.741
Now what this does is it imports
the statistics then it prints the mean and

84
00:07:28.741 --> 00:07:32.120
uses statistics.mean to do it.

85
00:07:32.120 --> 00:07:37.080
Computes the median, computes the mode,
computes the standard deviation and

86
00:07:37.080 --> 00:07:38.170
completes the variance.

87
00:07:39.490 --> 00:07:41.320
I wanted to try that out.

88
00:07:44.690 --> 00:07:48.780
Add list.

89
00:07:51.950 --> 00:07:53.410
Look what's happened here.

90
00:07:54.575 --> 00:07:55.837
It crashed.

91
00:07:55.837 --> 00:07:58.852
It did manage to compute the mean and
median and

92
00:07:58.852 --> 00:08:01.180
print those out before it crashed.

93
00:08:03.739 --> 00:08:10.720
But on the mode, It ran into trouble.

94
00:08:10.720 --> 00:08:14.280
And ultimately after it crashed
it gives you an error message.

95
00:08:14.280 --> 00:08:16.910
No unique mode found 100
equal to common values.

96
00:08:16.910 --> 00:08:22.060
Well if you've got real numbers
between five and six thousand, with

97
00:08:22.060 --> 00:08:25.870
only 100 of them the chances of two of
them coming out to be the same are slim.

98
00:08:27.460 --> 00:08:35.167
So, What has happened here is that
that error occurred in this module,

99
00:08:35.167 --> 00:08:39.640
statistics.py, the library
in fact line 434.

100
00:08:39.640 --> 00:08:45.250
And that's where we go the error message.

101
00:08:46.490 --> 00:08:52.470
But that was, we wound up in
that place by calling statistics

102
00:08:52.470 --> 00:08:56.960
dot node and we wind up calling statistics
dot node because we ran our function.

103
00:08:58.360 --> 00:09:04.780
So there's a trace down through the series
of calls that made this error happen.

104
00:09:06.600 --> 00:09:13.820
The main problem is from our programmers
point of view is statistics.mode failed.

105
00:09:13.820 --> 00:09:16.250
Now, what I want to do is correct that.

106
00:09:19.430 --> 00:09:21.590
I'm not going to keep it
from having the error.

107
00:09:21.590 --> 00:09:23.840
What I'm going to do is
keep program from crashing.

108
00:09:27.260 --> 00:09:31.460
And this is the way you do it in Python.

109
00:09:31.460 --> 00:09:35.980
You have a tri-accept pair of statements.

110
00:09:37.070 --> 00:09:41.830
We try and then we are trying to
do the same statement that failed.

111
00:09:43.420 --> 00:09:48.568
If it fails, if it's a statistic error,
we are going to

112
00:09:48.568 --> 00:09:53.934
store that error in e and
we are going to print mode error and

113
00:09:53.934 --> 00:09:58.984
e the mode was where had
the promise saying mode error.

114
00:10:02.712 --> 00:10:08.030
If this works just fine
the exception doesn't get executed.

115
00:10:10.200 --> 00:10:13.390
In either case we go on
to the next statement.

116
00:10:15.380 --> 00:10:16.030
We don't crash.

117
00:10:18.340 --> 00:10:20.118
Lets actually keep that and
see that that happens.

118
00:10:28.391 --> 00:10:29.420
See?

119
00:10:29.420 --> 00:10:33.180
No crash, but we do get that
same error message at the end.

120
00:10:40.420 --> 00:10:44.850
Now let's try another function

121
00:10:46.580 --> 00:10:53.830
that involves using a try and
accept statement.

122
00:10:53.830 --> 00:10:59.520
This function, as you input a number then
its going to print what type that is.

123
00:10:59.520 --> 00:11:02.730
Actually inputs are always string so
it's always going to print string.

124
00:11:04.000 --> 00:11:06.830
Okay, we're going to try
to convert that number,

125
00:11:07.830 --> 00:11:12.280
we're going to try to convert that
number to float and print it.

126
00:11:12.280 --> 00:11:14.940
If that fails we gotta
grab that exception.

127
00:11:17.080 --> 00:11:19.680
Stored in e and print the exception was e.

128
00:11:19.680 --> 00:11:21.492
But we won't crash.

129
00:11:24.838 --> 00:11:32.100
Here is test_try().

130
00:11:32.100 --> 00:11:32.710
Enter a number.

131
00:11:32.710 --> 00:11:38.228
Now, what it's supposed to do is
convert a number like 5 to 5.0.

132
00:11:38.228 --> 00:11:43.160
You can see, that it actually
printed the type, was a string.

133
00:11:43.160 --> 00:11:45.546
And it converted to five.

134
00:11:47.986 --> 00:11:53.370
We try something else, 3.14,
the same thing happens.

135
00:11:53.370 --> 00:11:56.106
It's a string, converts it to 3.14,

136
00:11:56.106 --> 00:11:59.536
which It was to begin with
except that it was a string.

137
00:12:02.859 --> 00:12:04.760
Wonder where it failed.

138
00:12:04.760 --> 00:12:08.350
Let's suppose we enter some letters?

139
00:12:10.230 --> 00:12:11.390
It couldn't convert that.

140
00:12:12.850 --> 00:12:17.940
What if we just typed and
put an extra period in the number?

141
00:12:20.580 --> 00:12:22.300
Can't convert that.

142
00:12:22.300 --> 00:12:24.510
But notice that it never crashes.

143
00:12:24.510 --> 00:12:28.490
It tries, and then it grabs the exception
and prints the exception out.

144
00:12:29.660 --> 00:12:31.930
Could not convert string to float.

145
00:12:31.930 --> 00:12:34.010
Now, here's an exercise.

146
00:12:34.010 --> 00:12:39.540
I want you to run this

147
00:12:39.540 --> 00:12:44.780
code on your machine,
it creates a list of temperatures.

148
00:12:47.840 --> 00:12:52.280
These are farenheit
temperatures between 20 and 95.

149
00:12:52.280 --> 00:12:55.470
And we built that by

150
00:12:57.340 --> 00:13:00.240
using a random seat so
it comes out to be the same for everybody.

151
00:13:00.240 --> 00:13:05.070
We start with an empty list, we go
through this loop 20 times, we generate

152
00:13:05.070 --> 00:13:09.980
a random integer in this range, and
append it onto that list and there we are.

153
00:13:12.681 --> 00:13:15.292
And here is your starter
function if you want.

154
00:13:17.470 --> 00:13:21.745
When you finish it, it should print
the list, the mean, the median,

155
00:13:21.745 --> 00:13:24.364
the standard deviation and the variance.

156
00:13:31.583 --> 00:13:33.314
Here is my solution.

157
00:13:49.558 --> 00:13:52.698
There.
What it does is it prints

158
00:13:52.698 --> 00:13:55.790
the temperature list.

159
00:13:55.790 --> 00:14:00.237
It prints the statistics mean,
the statistics median,

160
00:14:00.237 --> 00:14:05.621
the statistics standard deviation,
and the statistics variance.

161
00:14:09.964 --> 00:14:11.660
I stayed away from mode on this version.

162
00:14:13.020 --> 00:14:18.187
Now, I want you to try and
soup that up to add mode.

163
00:14:21.263 --> 00:14:23.390
There won't be a mode on this.

164
00:14:23.390 --> 00:14:25.390
So you should get an error.

165
00:14:25.390 --> 00:14:26.808
Here's a run of my solution.

166
00:14:29.652 --> 00:14:33.292
You add the necessary code to
your solution, to get this.

167
00:14:38.544 --> 00:14:40.118
Here is my solution.

168
00:14:51.962 --> 00:14:57.400
No unique mode found for equal,
notice the program did not crash.

169
00:14:57.400 --> 00:15:01.010
What we did was we added a track
steps statement to the end.

170
00:15:01.010 --> 00:15:03.090
We try to print the mode.

171
00:15:03.090 --> 00:15:07.030
Just like we did for all the others we
use mode as setup variance for example.

172
00:15:08.350 --> 00:15:12.290
And if there is an exception we
store it the exception in e and

173
00:15:12.290 --> 00:15:13.640
then print mode error e.

174
00:15:13.640 --> 00:15:19.380
The mode error was no
unique mode four equal to