WEBVTT

1
00:00:11.217 --> 00:00:14.790
Now let's look at
Formatting Print Statements.

2
00:00:14.790 --> 00:00:19.940
Here's some variables
that we'll work with, and

3
00:00:19.940 --> 00:00:22.295
here is a string we want to print.

4
00:00:22.295 --> 00:00:25.300
It'll have name, colon, and

5
00:00:25.300 --> 00:00:30.920
then we intend to put the name
Teddy Roosevelt into that slot.

6
00:00:30.920 --> 00:00:32.590
And his age and his weight here.

7
00:00:34.020 --> 00:00:34.810
Here is an example.

8
00:00:37.450 --> 00:00:38.460
In the first one,

9
00:00:38.460 --> 00:00:43.210
we put his shortened version of
his name Teddy in age and weight.

10
00:00:44.330 --> 00:00:46.971
So there's Teddy Roosevelt, age, weight.

11
00:00:46.971 --> 00:00:51.084
In the second one,
we used a longer version of his name, and

12
00:00:51.084 --> 00:00:55.480
you see that it caused age and
weight to move over.

13
00:00:55.480 --> 00:01:00.164
One of the things that we might
typically want is to have these aligned

14
00:01:00.164 --> 00:01:01.633
a little bit better.

15
00:01:06.406 --> 00:01:09.740
Here's another formatting string.

16
00:01:09.740 --> 00:01:14.455
And in the 0 slot,
we're allowing 26 spaces,

17
00:01:14.455 --> 00:01:19.750
in the 1 slot 4 spaces, and
in the 2 slot 10 spaces.

18
00:01:19.750 --> 00:01:23.220
This is minimum number of spaces allowed.

19
00:01:23.220 --> 00:01:28.180
Also, this right arrow indicates
right alignment within that space.

20
00:01:29.870 --> 00:01:30.810
Let's see what that looks like.

21
00:01:33.720 --> 00:01:38.920
So Teddy Roosevelt is right aligned
within a space of 26 characters and

22
00:01:38.920 --> 00:01:40.360
the long version and

23
00:01:40.360 --> 00:01:46.030
the short version are both lined up
one above another in a nice fashion.

24
00:01:46.030 --> 00:01:48.620
The ages are aligned up and
the weights are aligned up.

25
00:01:50.550 --> 00:01:54.100
Now the weight is too many decimal places.

26
00:01:54.100 --> 00:01:57.837
So I'm going to change that a little bit.

27
00:01:57.837 --> 00:02:02.732
In this case we're going to say that
the weight is going to have at least

28
00:02:02.732 --> 00:02:07.780
five spaces, two of which are to
the right of the decimal.

29
00:02:07.780 --> 00:02:08.872
This is a floating point number.

30
00:02:15.432 --> 00:02:18.510
So here it is.

31
00:02:18.510 --> 00:02:21.749
At least five spaces two to
the right of the decimal.

32
00:02:21.749 --> 00:02:24.175
It looks nicer.

33
00:02:29.702 --> 00:02:37.729
Now one of the things that we can
do is use this string down here,

34
00:02:37.729 --> 00:02:44.190
this variable name instead
of the actual string.

35
00:02:44.190 --> 00:02:46.230
It gives you the same result.

36
00:02:46.230 --> 00:02:48.130
And this is more compact.

37
00:02:51.390 --> 00:02:56.175
I want you to try some of this and
get familiar with what is actually done.

38
00:03:03.014 --> 00:03:05.638
Here's a short string.

39
00:03:05.638 --> 00:03:10.299
What I've got here is a string

40
00:03:10.299 --> 00:03:14.773
that begins start bar bar and

41
00:03:14.773 --> 00:03:18.322
ends with bar bar end.

42
00:03:18.322 --> 00:03:24.384
So that you can see that this string got
fitted into here and it is left justified.

43
00:03:29.550 --> 00:03:36.220
If we printed the number into that
space the string is exactly the same.

44
00:03:36.220 --> 00:03:38.300
But we're sticking in the number.

45
00:03:38.300 --> 00:03:43.177
The number is right-aligned instead
of left-aligned like the string.

46
00:03:46.080 --> 00:03:51.970
Here's an exercise I'd like you
to do to become familiar with it.

47
00:03:51.970 --> 00:03:55.780
I want you to take a string S

48
00:03:59.060 --> 00:04:03.720
and a format statement like I just used.

49
00:04:04.810 --> 00:04:07.080
And try various things with it.

50
00:04:07.080 --> 00:04:09.898
Use 0 to just print the string
with no formatting.

51
00:04:09.898 --> 00:04:15.090
If I press up arrow,
I'll bring this back up.

52
00:04:15.090 --> 00:04:17.910
And I can put the 0 there, press Enter.

53
00:04:17.910 --> 00:04:18.810
That's what it does.

54
00:04:20.780 --> 00:04:26.614
Now you can up arrow it, and use :25.

55
00:04:26.614 --> 00:04:31.705
See what it does, so why don't you go down

56
00:04:31.705 --> 00:04:38.090
through this list and
try all of these options.

57
00:04:38.090 --> 00:04:39.940
Here's what I get when I do it.

58
00:04:44.247 --> 00:04:45.385
Here are my solutions.

59
00:04:45.385 --> 00:04:51.040
Start zero end.

60
00:04:51.040 --> 00:04:58.560
Format s allow 25 spaces,
here's 25 spaces right aligned,

61
00:04:58.560 --> 00:05:02.760
here's 25 spaces left aligned and
here's 25 spaces centered