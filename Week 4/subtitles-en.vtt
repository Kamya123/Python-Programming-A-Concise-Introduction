WEBVTT

1
00:00:11.318 --> 00:00:15.923
Let's look at a couple of ways of making
long strings that won't fit on one line in

2
00:00:15.923 --> 00:00:16.677
the editor.

3
00:00:20.431 --> 00:00:24.664
In both of these cases you
have a string on each line,

4
00:00:24.664 --> 00:00:27.080
that can be two or more lines.

5
00:00:28.390 --> 00:00:32.130
In this first method you tie
them together by putting a plus

6
00:00:32.130 --> 00:00:35.710
sign at the end of a line and a back
slash to connect it to the next line.

7
00:00:36.890 --> 00:00:40.205
In the second method you put
a parentheses at the beginning and

8
00:00:40.205 --> 00:00:43.480
an end parentheses at
the end to tie them together.

9
00:00:43.480 --> 00:00:46.392
In both cases you wind
up with one long string.

10
00:00:51.303 --> 00:00:53.168
Sometimes you need a list of numbers.

11
00:00:53.168 --> 00:00:57.515
We're going to import
the Python library random and

12
00:00:57.515 --> 00:01:01.355
use it to generate a list
of random numbers.

13
00:01:04.085 --> 00:01:11.105
Call the function makeRandom and
it generates ten random numbers.

14
00:01:11.105 --> 00:01:12.150
Just take a look at that function.

15
00:01:14.130 --> 00:01:17.916
First of all, we're following
our usual basic loop pattern.

16
00:01:17.916 --> 00:01:21.580
We're going to create
a list here that's empty.

17
00:01:21.580 --> 00:01:25.280
We're going to step
through a loop ten times.

18
00:01:25.280 --> 00:01:28.530
We're going to generate a random
number between 1 and 100,

19
00:01:28.530 --> 00:01:33.090
a random integer, and
we're going to append it to that list.

20
00:01:33.090 --> 00:01:37.490
And then afterwards,
we're going to return this list.

21
00:01:37.490 --> 00:01:43.940
Now, normally we've been printing these
out but returning this has the effect of

22
00:01:43.940 --> 00:01:50.080
assigning a value to makeRandom that can
be used by other functions and programs.

23
00:01:52.090 --> 00:01:52.910
As you can see,

24
00:01:54.130 --> 00:01:58.904
it works virtually the same as printing
it out from the iPython window.

25
00:02:01.670 --> 00:02:06.160
Now what I want to do is show
how we make use of this.

26
00:02:06.160 --> 00:02:09.000
So we're going to have a function
called call_make_random.

27
00:02:09.000 --> 00:02:16.680
It will call this function and
it will, this is the call right here,

28
00:02:16.680 --> 00:02:23.080
it will make the random number which is
returned and assigned to this variable.

29
00:02:23.080 --> 00:02:24.476
And then we're going to
print that variable.

30
00:02:24.476 --> 00:02:29.061
Call_make_random, and

31
00:02:29.061 --> 00:02:37.960
it prints out the list of
random numbers is this.

32
00:02:37.960 --> 00:02:44.560
So you see, our function returned
a value and that value was a set,

33
00:02:44.560 --> 00:02:48.230
set equal to this variable and
then we printed this variable out.

34
00:02:50.680 --> 00:02:54.720
Sometimes we don't want a different
set of random numbers each time.

35
00:02:54.720 --> 00:02:57.730
We want to generate the same
numbers over and over again.

36
00:02:57.730 --> 00:03:01.410
This is particularly useful when
you're debugging a program.

37
00:03:01.410 --> 00:03:04.930
You don't want to be surprised by
a different set of numbers and

38
00:03:04.930 --> 00:03:06.290
have your program work differently.

39
00:03:08.700 --> 00:03:14.660
We can do this by setting a random
seed to some particular number,

40
00:03:14.660 --> 00:03:17.410
and then it will generate the same
random numbers every time.

41
00:03:18.900 --> 00:03:26.825
Here's a function called make_same_random
that will set the seed to 17.

42
00:03:33.442 --> 00:03:34.380
We run it again.

43
00:03:34.380 --> 00:03:37.350
We get the same numbers.

44
00:03:39.820 --> 00:03:44.790
Now, we have a function named
call_make_random that will call

45
00:03:44.790 --> 00:03:49.804
the random function and
get a set of integers, print them, and

46
00:03:49.804 --> 00:03:56.600
then it'll call the function again and get
another set of integers and print that.

47
00:03:56.600 --> 00:04:01.095
And you'll see that they're
the same ones every time.

48
00:04:09.040 --> 00:04:14.448
I want you to write a function that
will generate random real numbers.

49
00:04:14.448 --> 00:04:20.695
You'll use random.random which returns
a random number between zero and

50
00:04:20.695 --> 00:04:25.070
one instead of rand_int
which returns an integer.

51
00:04:28.890 --> 00:04:31.852
Here is what mine looks like.

52
00:04:31.852 --> 00:04:34.852
make_random_real runs and

53
00:04:34.852 --> 00:04:39.652
it generates a list of
ten random real numbers.

54
00:04:46.717 --> 00:04:48.737
Now let me show you my solution.

55
00:05:01.148 --> 00:05:05.109
We'll create an empty list,
then we go through a loop ten times,

56
00:05:05.109 --> 00:05:09.935
we generate a random number between zero
and one and we append it to the list, and

57
00:05:09.935 --> 00:05:12.300
then we return that value.

58
00:05:12.300 --> 00:05:19.080
Now I want you to modify your
solution to use a random seed.

59
00:05:19.080 --> 00:05:21.367
Use 17 as your random seed.

60
00:05:21.367 --> 00:05:28.024
In my solution I did this and I ran
it twice, and I get the same numbers.

61
00:05:40.708 --> 00:05:44.096
Here is that solution.

62
00:05:44.096 --> 00:05:48.207
The only real difference is
having this random seed there.

63
00:05:58.991 --> 00:06:01.936
Now, let's look at sorting lists.

64
00:06:01.936 --> 00:06:04.011
Here's a number list
that we can work with.

65
00:06:09.843 --> 00:06:15.092
And what we've done is we've printed
the number list, there it is,

66
00:06:15.092 --> 00:06:20.480
and we sorted the number list and
then we printed it again.

67
00:06:20.480 --> 00:06:24.614
As you can see, the number list is
permantly changed and is now in order.

68
00:06:27.279 --> 00:06:30.280
Let me restore this number list.

69
00:06:30.280 --> 00:06:31.998
In the past, we had this function sorted.

70
00:06:31.998 --> 00:06:34.751
It was a sorted list but
it's not permanent.

71
00:06:37.802 --> 00:06:42.559
It printed it out in order all right,
but nonetheless,

72
00:06:42.559 --> 00:06:45.605
it's still in the original order.

73
00:06:49.994 --> 00:06:53.411
Now let's create a list of letters.

74
00:06:58.749 --> 00:07:03.650
Make out the list produces
a list of letters.

75
00:07:03.650 --> 00:07:05.390
Let's look at how that works.

76
00:07:05.390 --> 00:07:07.270
We import the random function.

77
00:07:07.270 --> 00:07:10.830
Here are the complete list
of English alphabet letters.

78
00:07:10.830 --> 00:07:13.917
We set a random seed so
that it always comes out to be the same.

79
00:07:14.970 --> 00:07:16.750
Then we have a basic loop.

80
00:07:16.750 --> 00:07:20.210
We set alpha list equal to a blank list,
and

81
00:07:20.210 --> 00:07:24.180
then we step through
this loop ten times and

82
00:07:24.180 --> 00:07:29.028
we choose a random letter
out of the alphabet and

83
00:07:29.028 --> 00:07:32.620
then append it onto that alpha list.

84
00:07:34.530 --> 00:07:36.440
And then we return that alpha list.

85
00:07:38.250 --> 00:07:43.460
Now I want to have a list that's
equal to that alpha list,

86
00:07:43.460 --> 00:07:45.690
and so I'm going to execute this.

87
00:07:48.720 --> 00:07:54.265
This says run alpha list and return
the value and set it equal to alpha list.

88
00:07:57.908 --> 00:07:59.894
You can see I just did that.

89
00:08:03.160 --> 00:08:06.176
This is the same thing.

90
00:08:06.176 --> 00:08:10.219
I just wanted to show you
how to generate a random

91
00:08:10.219 --> 00:08:13.562
list of any arbitrary size of letters.

92
00:08:20.848 --> 00:08:22.836
Now let's sort them.

93
00:08:22.836 --> 00:08:24.823
This prints the alpha list.

94
00:08:28.425 --> 00:08:31.383
Then this sorts the alpha list.

95
00:08:31.383 --> 00:08:33.840
And then this prints the alpha list again.

96
00:08:33.840 --> 00:08:35.617
And you can see that it got sorted.

97
00:08:40.807 --> 00:08:46.600
Now here's an alpha list that has
a mixture of upper and lower case letters.

98
00:08:46.600 --> 00:08:50.610
If we try the same thing with it,
look what happens.

99
00:08:53.300 --> 00:08:58.029
Here is the list unchanged,
then it sorted and

100
00:08:58.029 --> 00:09:01.480
then it printed out sorted.

101
00:09:01.480 --> 00:09:06.150
But all of the capital letters
precede all the lowercase letters.

102
00:09:06.150 --> 00:09:10.430
Here's a capital D for
example which precedes a lowercase b.

103
00:09:10.430 --> 00:09:15.690
That's not what we
typically want to happen,

104
00:09:17.300 --> 00:09:23.050
but we can change the sort
function very slightly and

105
00:09:23.050 --> 00:09:27.520
we can tell it to use as its key
the string changed to lowercase.

106
00:09:29.090 --> 00:09:34.940
Let's start the list all over again,
and now, let's sort that.

107
00:09:36.190 --> 00:09:39.940
Here's the list as we originally had it.

108
00:09:39.940 --> 00:09:42.890
And here's the sorted list right here.

109
00:09:42.890 --> 00:09:47.930
And notice that the sorted list has a,
b, d, d, e.

110
00:09:47.930 --> 00:09:51.505
It's in alphabetical order
regardless of capitalization.

111
00:09:55.179 --> 00:09:57.910
Let's create a list of strings.

112
00:09:57.910 --> 00:10:03.320
Sort that.
Worked out just fine but

113
00:10:03.320 --> 00:10:06.540
everything's lowercase.

114
00:10:06.540 --> 00:10:09.630
Let's have the same string as
a mixture of upper and lower case.

115
00:10:12.250 --> 00:10:16.654
Now when we sort it,
all the words with capital letters

116
00:10:16.654 --> 00:10:20.113
precede the ones with lowercase letters.

117
00:10:26.251 --> 00:10:27.620
Let's restore the list.

118
00:10:29.100 --> 00:10:33.290
Now we can use key equals
string lower which changes

119
00:10:33.290 --> 00:10:36.200
all the characters to
lowercase before it sorts.

120
00:10:36.200 --> 00:10:37.050
And this is what we get.

121
00:10:37.050 --> 00:10:40.000
This is more like what we expect.

122
00:10:42.120 --> 00:10:44.480
Here's the original and
here's the sorted one.

123
00:10:44.480 --> 00:10:50.318
The sorted one is in alphabetical order
regardless of the case of the letter.